// Comparison operators return boolean values (represented as 1 for true, 0 for false)

// Equality and inequality
let equal = 5 == 5;          // true (1)
let not_equal1 = 5 != 3;     // true (1)
let not_equal2 = 10 == 15;   // false (0)

// Relational comparisons
let greater = 10 > 5;        // true (1)
let less = 3 < 8;           // true (1)
let greater_equal = 5 >= 5;  // true (1)
let less_equal = 4 <= 4;     // true (1)

// Comparisons with variables
let a = 15;
let b = 20;
let c = 15;

let a_eq_b = a == b;         // false (0)
let a_eq_c = a == c;         // true (1)
let a_lt_b = a < b;          // true (1)
let b_gt_a = b > a;          // true (1)

// Floating-point comparisons
let x = 3.14;
let y = 2.71;

let float_eq = x == y;       // false (0)
let float_gt = x > y;        // true (1)
let float_le = y <= x;       // true (1)

// Chaining comparisons (evaluated left to right)
let chain1 = 1 < 2 < 3;      // (1 < 2) results in 1, then 1 < 3 is true
let chain2 = 3 > 2 > 1;      // (3 > 2) results in 1, then 1 > 1 is false

// Comparisons in expressions
let result = (10 > 5) + (3 < 2);  // 1 + 0 = 1
let conditional_value = 15 > 10;   // Store boolean result

// Using comparisons with mutable variables
let mut status = 0;
let score = 85;

status = score >= 90;        // false (0) - not an A grade
status = score >= 80;        // true (1) - B grade or better