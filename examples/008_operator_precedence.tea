// Operator precedence and complex expressions
// Higher precedence operators are evaluated first

// Arithmetic precedence: * and / before + and -
let result1 = 2 + 3 * 4;         // 2 + (3 * 4) = 2 + 12 = 14
let result2 = 10 - 6 / 2;        // 10 - (6 / 2) = 10 - 3 = 7
let result3 = 2 * 3 + 4 * 5;     // (2 * 3) + (4 * 5) = 6 + 20 = 26

// Parentheses override precedence
let result4 = (2 + 3) * 4;       // 5 * 4 = 20
let result5 = 10 - (6 / 2);      // 10 - 3 = 7 (same as result2, but explicit)
let result6 = (2 + 3) * (4 + 5); // 5 * 9 = 45

// Unary minus has high precedence
let result7 = -2 + 3;            // (-2) + 3 = 1
let result8 = -(2 + 3);          // -(5) = -5
let result9 = -2 * 3;            // (-2) * 3 = -6

// Comparison operators have lower precedence than arithmetic
let comp1 = 5 + 3 > 2 * 3;       // (5 + 3) > (2 * 3) = 8 > 6 = 1
let comp2 = 10 - 5 == 15 / 3;    // (10 - 5) == (15 / 3) = 5 == 5 = 1
let comp3 = 2 * 3 + 1 <= 4 + 3;  // ((2 * 3) + 1) <= (4 + 3) = 7 <= 7 = 1

// Logical operators have lowest precedence
let logic1 = 5 > 3 && 2 < 4;     // (5 > 3) && (2 < 4) = 1 && 1 = 1
let logic2 = 1 + 1 == 2 || 3 > 5; // ((1 + 1) == 2) || (3 > 5) = 1 || 0 = 1

// Complex mixed expressions
let a = 10;
let b = 5;
let c = 2;

let complex1 = a + b * c > a / c + b;     // 10 + (5 * 2) > (10 / 2) + 5 = 20 > 10 = 1
let complex2 = (a - b) * c == b + c * 2;  // (10 - 5) * 2 == 5 + (2 * 2) = 10 == 9 = 0
let complex3 = a > b && b > c || a == c;  // (10 > 5) && (5 > 2) || (10 == 2) = 1 && 1 || 0 = 1

// Associativity: operators of same precedence evaluate left to right
let assoc1 = 10 - 5 - 2;         // (10 - 5) - 2 = 5 - 2 = 3
let assoc2 = 8 / 4 / 2;          // (8 / 4) / 2 = 2 / 2 = 1
let assoc3 = 1 < 2 < 3;          // (1 < 2) < 3 = 1 < 3 = 1

// Using parentheses for clarity and control
let clear1 = (a + b) * (c + 1);          // (10 + 5) * (2 + 1) = 15 * 3 = 45
let clear2 = (a > b) && (b > c);         // (10 > 5) && (5 > 2) = 1 && 1 = 1
let clear3 = ((a + b) > c) || (a == b);  // ((10 + 5) > 2) || (10 == 5) = 1 || 0 = 1