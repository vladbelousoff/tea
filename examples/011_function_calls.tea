// Test file for function calls in expressions

// Simple function definitions for testing
fn get_five() -> int {
    return 5;
    return 6;
}

fn add(a: int, b: int) -> int {
    return a + b;
}

fn multiply(x: int, y: int) -> int {
    return x * y;
}

fn is_positive(n: int) -> bool {
    return n > 0;
}

fn get_zero() -> int {
    return 0;
}

fn identity(x: int) -> int {
    return x;
}

// Test function calls in variable assignments
let x = get_five();
let y = add(3, 4);
let z = multiply(2, 5);

// Test function calls in expressions
let result1 = add(10, 20) * 2;
let result2 = multiply(3, 4) + get_five();
let result3 = add(1, 2) + add(3, 4);

// Test function calls in conditional expressions
let test1 = is_positive(10);
let test2 = is_positive(-5);
let test3 = get_five() > get_zero();

// Test nested function calls
let nested1 = add(multiply(2, 3), get_five());
let nested2 = multiply(add(1, 2), add(3, 4));

// Test function calls in return statements
fn test_return_calls() -> int {
    return add(5, 3);
}

fn test_nested_return() -> int {
    return multiply(add(2, 3), get_five());
}

// Test function calls in conditional statements
fn test_conditional_calls(x: int) -> int {
    if is_positive(x) {
        return add(x, 10);
    } else {
        return multiply(x, -1);
    }
}

// Test function calls in while loops
fn test_loop_calls(max: int) -> int {
    let mut sum = 0;
    let mut i = 0;
    
    while i < max {
        sum = add(sum, identity(i));
        i = i + 1;
    }
    
    return sum;
}

// Test function calls with complex expressions
fn test_complex_expressions(a: int, b: int) -> int {
    let temp1 = add(a, b);
    let temp2 = multiply(temp1, get_five());
    let result = add(temp2, multiply(a, b));
    return result;
}

// Test function calls in logical expressions
fn test_logical_calls(x: int, y: int) -> bool {
    let positive_x = is_positive(x);
    let positive_y = is_positive(y);
    return positive_x && positive_y;
}

// Test function calls with no arguments
fn no_args() -> int {
    return 42;
}

let simple_call = no_args();
let complex_call = add(no_args(), get_five());
let zzz = test_complex_expressions(3, 7);