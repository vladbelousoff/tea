// Struct definition with fields only
struct Point {
    x: float;
    y: float;
}

// Impl block for Point struct
impl Point {
    fn distance_to(other: Point) -> float {
        let dx = self.x - other.x;
        let dy = self.y - other.y;
        return dx * dx + dy * dy;
    }

    fn move(dx: float, dy: float) {
        self.x = self.x + dx;
        self.y = self.y + dy;
    }

    fn get_x() -> float {
        return self.x;
    }

    fn get_y() -> float {
        return self.y;
    }
}

// Struct with only fields (no methods in struct definition)
struct Calculator {
}

// Impl block for Calculator struct
impl Calculator {
    fn add(a: int, b: int) -> int {
        return a + b;
    }

    fn multiply(a: int, b: int) -> int {
        return a * b;
    }

    fn factorial(n: int) -> int {
        if n <= 1 {
            return 1;
        } else {
            return n * factorial(n - 1);
        }
    }
}

// Struct with fields
struct Person {
    name: string;
    age: int;
}

// Impl block for Person struct
impl Person {
    fn is_adult() -> bool {
        return self.age >= 18;
    }

    fn birthday() {
        self.age = self.age + 1;
    }

    fn get_info() -> string {
        return self.name;
    }
}

let p1 = new Point {x: 10, y: 30};
let p2 = new Point {x: 13, y: 30};
// let result = p1.distance_to(p2);