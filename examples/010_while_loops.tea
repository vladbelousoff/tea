// While loops for repetitive execution

// Simple counting loop
let mut i = 0;
let mut sum = 0;

while i < 5 {
    sum = sum + i;
    i = i + 1;
}
// After loop: i = 5, sum = 0 + 1 + 2 + 3 + 4 = 10

// Countdown loop
let mut countdown = 10;
while countdown > 0 {
    countdown = countdown - 1;
}
// After loop: countdown = 0

// Loop with complex condition
let mut x = 100;
let mut iterations = 0;

while x > 1 && iterations < 10 {
    x = x / 2;
    iterations = iterations + 1;
}

// Accumulator pattern
let mut total = 0;
let mut number = 1;

while number <= 10 {
    total = total + number;
    number = number + 1;
}
// Calculate sum of numbers 1 through 10: total = 55

// Nested while loops
let mut outer = 0;
let mut result = 0;

while outer < 3 {
    let mut inner = 0;
    while inner < 2 {
        result = result + (outer * 10 + inner);
        inner = inner + 1;
    }
    outer = outer + 1;
}
// Builds result: 0, 1, 10, 11, 20, 21

// While loop for search/find pattern
let mut found = 0;
let mut search_value = 1;
let target = 7;

while search_value <= 10 && found == 0 {
    if search_value == target {
        found = 1;
    }
    search_value = search_value + 1;
}

// Infinite loop prevention with safety counter
let mut process_count = 0;
let mut processing = 1;
let max_iterations = 100;

while processing && process_count < max_iterations {
    // Some processing logic here
    process_count = process_count + 1;
    
    // Condition to stop processing
    if process_count >= 50 {
        processing = 0;
    }
}

// Double condition while loop
let mut a = 10;
let mut b = 1;

while a > b && b < 8 {
    a = a - 1;
    b = b + 1;
}
// Loop continues while both conditions are true