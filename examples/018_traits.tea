// Define a Display trait
trait Display {
    fn to_string() -> string;
}

// Define a Drawable trait
trait Drawable {
    fn draw();
    fn area() -> f32;
}

// Define a Point struct
struct Point {
    x: f32;
    y: f32;
}

// Implement Display trait for Point
impl Display for Point {
    fn to_string() -> string {
        return 'Point';
    }
}

// Implement Drawable trait for Point  
impl Drawable for Point {
    fn draw() {
        println(self.to_string());
    }
    
    fn area() -> f32 {
        return 0.0; // Points have no area
    }
}

// Define a Rectangle struct
struct Rectangle {
    width: f32;
    height: f32;
}

// Implement Display trait for Rectangle
impl Display for Rectangle {
    fn to_string() -> string {
        return 'Rectangle';
    }
}

// Implement Drawable trait for Rectangle
impl Drawable for Rectangle {
    fn draw() {
        println(self.to_string());
    }
    
    fn area() -> f32 {
        return self.width * self.height;
    }
}

// Usage examples
let p = new Point { x: 1.0, y: 2.0 };
p.draw();   // Calls Drawable trait method
println('Area: ', p.area());

let r = new Rectangle { width: 5.0, height: 3.0 };
r.draw();   // Calls Drawable trait method
let rect_area = r.area();  // Calls Drawable trait method
println('Area: ', rect_area);